version: '3'
name: mongo-sharding

services:

  # Mongo routers
  
  mongos_router1:
    image: mongo:latest
    container_name: mongos_router1
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv1:27019,configSrv2:27019,configSrv3:27019",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
  
  mongos_router2:
    image: mongo:latest
    container_name: mongos_router2
    restart: always
    ports:
      - "27027:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv1:27019,configSrv2:27019,configSrv3:27019",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
  
  mongos_router3:
    image: mongo:latest
    container_name: mongos_router3
    restart: always
    ports:
      - "27028:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.18
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv1:27019,configSrv2:27019,configSrv3:27019",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s


  # Mongo config servers

  configSrv1:
    image: mongo:latest
    container_name: configSrv1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - config1-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27019"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s

  configSrv2:
    image: mongo:latest
    container_name: configSrv2
    restart: always
    ports:
      - "27029:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.19
    volumes:
      - config2-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27019"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s

  configSrv3:
    image: mongo:latest
    container_name: configSrv3
    restart: always
    ports:
      - "27030:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.20
    volumes:
      - config3-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27019"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s


  # Mongo shard1

  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s


  # Mongo shard2

  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s


  # Application

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router1
      - configSrv1
      - shard1
      - shard2
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    environment:
      MONGODB_URL: "mongodb://mongos_router1:27017"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config1-data:
  config2-data:
  config3-data:

  shard1-data:
  shard2-data:  
